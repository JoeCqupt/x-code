package io.github.xinfra.lab.code.graph;

import java.util.LinkedList;

public class NumIslands {
    public static void main(String[] args) {
        char[][] arr = new char[][]{
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'}, {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'}, {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'}, {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'}, {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
        };
        Solution solution = new Solution();
        int i = solution.numIslands(arr);
        System.out.println(i);
    }

    static class Solution {

        public int numIslands(char[][] grid) {
            int nums = 0;
            int m = grid.length;
            int n = grid[0].length;
            boolean[][] visited = new boolean[m][n];

            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    char c = grid[i][j];
                    if (c == '1' && !visited[i][j]) {
                        nums++;
                        LinkedList<int[]> queue = new LinkedList<>();
                        queue.addLast(new int[]{i, j});
                        visited[i][j] = true;
                        while (!queue.isEmpty()) {
                            int[] p = queue.pop();
                            int idx = p[0];
                            int jdx = p[1];
                            if (idx - 1 >= 0 && !visited[idx - 1][jdx] && grid[idx - 1][jdx] == '1') {
                                queue.addLast(new int[]{idx - 1, jdx});
                                visited[idx - 1][jdx] = true;
                            }
                            if (idx + 1 < m && !visited[idx + 1][jdx] && grid[idx + 1][jdx] == '1') {
                                queue.addLast(new int[]{idx + 1, jdx});
                                visited[idx + 1][jdx] = true;
                            }
                            if (jdx - 1 >= 0 && !visited[idx][jdx - 1] && grid[idx][jdx - 1] == '1') {
                                queue.addLast(new int[]{idx, jdx - 1});
                                visited[idx][jdx - 1] = true;
                            }
                            if (jdx + 1 < n && !visited[idx][jdx + 1] && grid[idx][jdx + 1] == '1') {
                                queue.addLast(new int[]{idx, jdx + 1});
                                visited[idx][jdx + 1] = true;
                            }
                        }
                    }
                }
            }

            return nums;
        }
    }

}
